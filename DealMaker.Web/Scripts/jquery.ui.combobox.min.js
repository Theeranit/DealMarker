/*! Ben's jQuery UI Extensions - v1.0.7 - 2013-09-18
* https://github.com/bseth99/jquery-ui-extensions
* Copyright 2013 Ben Olson; Licensed MIT */
(function (t) { t.widget("ui.combobox", { version: "1.0.7", widgetEventPrefix: "combobox", uiCombo: null, uiInput: null, _wasOpen: !1, _create: function () { var i, e, n = this.element.hide(); i = this.uiInput = t("<input />").insertAfter(n).addClass("ui-combobox-input").val(n.children(":selected").text()), e = this.uiCombo = i.wrap("<span>").parent().addClass("ui-combobox").insertAfter(n), i.autocomplete({ delay: 0, minLength: 0, appendTo: e, source: t.proxy(this, "_linkSelectList") }), t("<button>").attr("tabIndex", -1).attr("type", "button").insertAfter(i).button({ icons: { primary: "ui-icon-triangle-1-s" }, text: !1 }).removeClass("ui-corner-all").addClass("ui-corner-right ui-button-icon ui-combobox-button"), i.data("ui-autocomplete")._renderItem = function (i, e) { return t("<li>").append(t("<a>").html(e.label)).appendTo(i) }, this._on(this._events) }, _linkSelectList: function (i, e) { var n = RegExp(t.ui.autocomplete.escapeRegex(i.term), "i"); e(this.element.children("option").map(function () { var e = t(this).text(); return !this.value || i.term && !n.test(e) ? undefined : { label: e.replace(RegExp("(?![^&;]+;)(?!<[^<>]*)(" + t.ui.autocomplete.escapeRegex(i.term) + ")(?![^<>]*>)(?![^&;]+;)", "gi"), "<strong>$1</strong>"), value: e, option: this} })) }, _events: { "autocompletechange input": function (i, e) { var n = t(i.currentTarget); if (!e.item) { var s = RegExp("^" + t.ui.autocomplete.escapeRegex(n.val()) + "$", "i"), o = !1; this.element.children("option").each(function () { return t(this).text().match(s) ? (this.selected = o = !0, !1) : undefined }), o || (n.val(""), this.element.prop("selectedIndex", -1)) } this._trigger("change", i, { item: e.item ? e.item.option : null }) }, "autocompleteselect input": function (t, i) { i.item.option.selected = !0, this._trigger("select", t, { item: i.item.option }) }, "autocompleteopen input": function () { this.uiCombo.children(".ui-autocomplete").outerWidth(this.uiCombo.outerWidth(!0)) }, "mousedown .ui-combobox-button": function () { this._wasOpen = this.uiInput.autocomplete("widget").is(":visible") }, "click .ui-combobox-button": function () { this.uiInput.focus(), this._wasOpen || this.uiInput.autocomplete("search", "") } }, value: function (t) { var i, e = this.element, n = !1; return arguments.length ? (e.prop("selectedIndex", -1), e.children("option").each(function () { return this.value == t ? (this.selected = n = !0, !1) : undefined }), n ? this.uiInput.val(e.children(":selected").text()) : (this.uiInput.val(""), this.element.prop("selectedIndex", -1)), undefined) : (i = e.children(":selected"), i.length > 0 ? i.val() : null) }, _destroy: function () { this.element.show(), this.uiCombo.replaceWith(this.element) }, widget: function () { return this.uiCombo }, _getCreateEventData: function () { return { select: this.element, combo: this.uiCombo, input: this.uiInput} } }) })(jQuery);